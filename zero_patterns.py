import itertools
import numpy as np
import erdos_finder
import pickle

N = 5

identity = np.identity(N, dtype=int)
permutations = [np.array(par) for par in itertools.permutations(identity)]
identity_lis = np.arange(N)
permutations_lis = [np.array(par) for par in itertools.permutations(identity_lis)]


pos_values = np.array([[2**(i+N*j) for i in range(N)] for j in range(N)])
def num_from_mat(mat):
    return np.sum(mat*pos_values)

def mat_from_num(n):
    return np.array([[(n//(2**(i+N*j)))%2 for i in range(N)] for j in range(N)])

def min_rep_num(mat):
    tmat = mat.T
    return min(min(num_from_mat(L@mat@R), num_from_mat(L@tmat@R)) for L, R in itertools.product(permutations, repeat=2))

with open("erdoses.pkl", mode="rb") as f:
    repd, prepd, erdod = pickle.load(f)
##repd = {}
##repd[4] = [0, 1, 3, 7, 15, 18, 19, 22, 23, 30, 31, 51, 53, 55, 60, 61, 63, 119, 123, 127, 255, 278, 279, 286, 287, 292, 293, 295, 300, 301, 303, 310, 311, 316, 317, 318, 319, 358, 359, 362, 363, 366, 367, 375, 379, 382, 383, 494, 495, 511, 828, 829, 831, 854, 855, 857, 858, 859, 862, 863, 887, 891, 892, 893, 895, 975, 989, 990, 991, 1023, 1911, 1915, 1919, 1981, 1983, 2047, 4095, 4382, 4383, 4396, 4397, 4398, 4399, 4414, 4415, 4458, 4459, 4462, 4463, 4475, 4478, 4479, 4590, 4591, 4607, 4680, 4681, 4683, 4687, 4698, 4699, 4700, 4701, 4702, 4703, 4731, 4732, 4733, 4735, 4812, 4813, 4815, 4829, 4830, 4831, 4863, 4958, 4959, 4972, 4973, 4974, 4975, 4990, 4991, 5068, 5069, 5070, 5071, 5085, 5086, 5087, 5102, 5103, 5119, 5754, 5755, 5758, 5759, 5804, 5805, 5806, 5807, 5821, 5822, 5823, 5870, 5871, 5887, 6014, 6015, 6077, 6078, 6079, 6126, 6127, 6143, 7918, 7919, 7935, 8191, 13260, 13261, 13263, 13278, 13279, 13311, 13726, 13727, 13740, 13741, 13743, 13758, 13759, 13806, 13807, 13823, 14285, 14287, 14302, 14303, 14335, 15615, 15838, 15839, 15855, 15871, 16383, 31710, 31711, 31743, 32767, 65535]
##repd[5] = [0, 1, 3, 7, 15, 31, 34, 35, 38, 39, 46, 47, 62, 63, 99, 101, 103, 108, 109, 111, 124, 125, 127, 231, 235, 239, 249, 251, 255, 495, 503, 511, 1023, 1062, 1063, 1070, 1071, 1086, 1087, 1092, 1093, 1095, 1100, 1101, 1103, 1116, 1117, 1119, 1126, 1127, 1132, 1133, 1134, 1135, 1148, 1149, 1150, 1151, 1222, 1223, 1226, 1227, 1230, 1231, 1240, 1241, 1242, 1243, 1246, 1247, 1255, 1259, 1262, 1263, 1273, 1274, 1275, 1278, 1279, 1486, 1487, 1494, 1495, 1502, 1503, 1519, 1527, 1534, 1535, 2014, 2015, 2047, 3180, 3181, 3183, 3196, 3197, 3199, 3238, 3239, 3241, 3242, 3243, 3246, 3247, 3256, 3257, 3258, 3259, 3262, 3263, 3303, 3307, 3308, 3309, 3311, 3320, 3321, 3323, 3324, 3325, 3327, 3471, 3477, 3479, 3487, 3501, 3502, 3503, 3509, 3510, 3511, 3516, 3517, 3518, 3519, 3567, 3575, 3580, 3581, 3583, 3996, 3997, 3999, 4029, 4030, 4031, 4095, 7399, 7403, 7407, 7417, 7419, 7423, 7533, 7535, 7539, 7541, 7543, 7548, 7549, 7551, 7663, 7671, 7673, 7675, 7679, 7998, 7999, 8059, 8061, 8063, 8191, 15855, 15863, 15871, 16123, 16127, 16383, 32767, 33838, 33839, 33854, 33855, 33868, 33869, 33870, 33871, 33884, 33885, 33886, 33887, 33902, 33903, 33916, 33917, 33918, 33919, 33994, 33995, 33998, 33999, 34008, 34009, 34010, 34011, 34014, 34015, 34027, 34030, 34031, 34041, 34042, 34043, 34046, 34047, 34254, 34255, 34262, 34263, 34270, 34271, 34287, 34295, 34302, 34303, 34782, 34783, 34815, 34940, 34941, 34943, 34952, 34953, 34955, 34959, 34968, 34969, 34971, 34975, 34986, 34987, 34988, 34989, 34990, 34991, 35000, 35001, 35002, 35003, 35004, 35005, 35006, 35007, 35051, 35052, 35053, 35055, 35064, 35065, 35067, 35068, 35069, 35071, 35212, 35213, 35215, 35220, 35221, 35223, 35228, 35229, 35231, 35245, 35246, 35247, 35253, 35254, 35255, 35260, 35261, 35262, 35263, 35311, 35319, 35324, 35325, 35327, 35740, 35741, 35743, 35773, 35774, 35775, 35839, 35964, 35965, 35966, 35967, 36014, 36015, 36024, 36025, 36026, 36027, 36030, 36031, 36044, 36045, 36046, 36047, 36056, 36057, 36058, 36059, 36060, 36061, 36062, 36063, 36078, 36079, 36088, 36089, 36090, 36091, 36092, 36093, 36094, 36095, 36236, 36237, 36238, 36239, 36244, 36245, 36246, 36247, 36252, 36253, 36254, 36255, 36269, 36270, 36271, 36277, 36278, 36279, 36284, 36285, 36286, 36287, 36302, 36303, 36310, 36311, 36316, 36317, 36318, 36319, 36335, 36343, 36348, 36349, 36350, 36351, 36764, 36765, 36766, 36767, 36797, 36798, 36799, 36830, 36831, 36863, 39128, 39129, 39130, 39131, 39134, 39135, 39146, 39147, 39150, 39151, 39160, 39161, 39162, 39163, 39166, 39167, 39244, 39245, 39246, 39247, 39250, 39251, 39252, 39253, 39254, 39255, 39260, 39261, 39262, 39263, 39277, 39278, 39279, 39283, 39285, 39286, 39287, 39288, 39289, 39290, 39291, 39292, 39293, 39294, 39295, 39374, 39375, 39382, 39383, 39384, 39385, 39386, 39387, 39390, 39391, 39407, 39415, 39416, 39417, 39418, 39419, 39422, 39423, 39710, 39711, 39737, 39738, 39739, 39742, 39743, 39770, 39771, 39772, 39773, 39774, 39775, 39803, 39805, 39806, 39807, 39902, 39903, 39935, 40174, 40175, 40185, 40186, 40187, 40190, 40191, 40301, 40302, 40303, 40307, 40309, 40310, 40311, 40316, 40317, 40318, 40319, 40398, 40399, 40406, 40407, 40409, 40410, 40411, 40414, 40415, 40431, 40439, 40441, 40442, 40443, 40446, 40447, 40766, 40767, 40794, 40795, 40796, 40797, 40798, 40799, 40827, 40829, 40830, 40831, 40926, 40927, 40959, 47566, 47567, 47574, 47575, 47582, 47583, 47599, 47606, 47607, 47614, 47615, 47834, 47835, 47838, 47839, 47863, 47867, 47870, 47871, 48094, 48095, 48127, 48623, 48631, 48638, 48639, 48891, 48894, 48895, 49118, 49119, 49151, 64478, 64479, 64511, 65535, 101500, 101501, 101503, 101560, 101561, 101562, 101563, 101564, 101565, 101566, 101567, 101624, 101625, 101627, 101628, 101629, 101631, 101772, 101773, 101775, 101780, 101781, 101783, 101788, 101789, 101791, 101806, 101807, 101813, 101814, 101815, 101820, 101821, 101822, 101823, 101871, 101879, 101884, 101885, 101887, 102300, 102301, 102303, 102333, 102334, 102335, 102399, 103640, 103641, 103643, 103647, 103672, 103673, 103674, 103675, 103678, 103679, 103726, 103727, 103729, 103730, 103731, 103734, 103735, 103742, 103743, 103756, 103757, 103759, 103763, 103764, 103765, 103766, 103767, 103772, 103773, 103775, 103790, 103791, 103795, 103797, 103798, 103799, 103800, 103801, 103802, 103803, 103804, 103805, 103806, 103807, 103886, 103887, 103894, 103895, 103896, 103897, 103898, 103899, 103902, 103903, 103919, 103927, 103928, 103929, 103930, 103931, 103934, 103935, 104217, 104218, 104219, 104222, 104223, 104249, 104250, 104251, 104254, 104255, 104282, 104283, 104284, 104285, 104286, 104287, 104315, 104317, 104318, 104319, 104414, 104415, 104447, 105720, 105721, 105723, 105724, 105725, 105727, 105843, 105844, 105845, 105847, 105852, 105853, 105855, 105869, 105871, 105877, 105879, 105881, 105883, 105884, 105885, 105887, 105902, 105903, 105909, 105910, 105911, 105912, 105913, 105914, 105915, 105916, 105917, 105918, 105919, 105967, 105975, 105976, 105977, 105979, 105980, 105981, 105983, 106267, 106268, 106269, 106271, 106297, 106298, 106299, 106300, 106301, 106302, 106303, 106363, 106364, 106365, 106367, 106396, 106397, 106399, 106429, 106430, 106431, 106495, 111087, 111093, 111095, 111103, 111285, 111286, 111287, 111290, 111291, 111295, 111351, 111355, 111357, 111359, 111615, 112046, 112047, 112053, 112054, 112055, 112060, 112061, 112062, 112063, 112079, 112085, 112087, 112092, 112093, 112095, 112111, 112117, 112118, 112119, 112124, 112125, 112126, 112127, 112313, 112314, 112315, 112316, 112317, 112318, 112319, 112347, 112348, 112349, 112351, 112375, 112379, 112380, 112381, 112382, 112383, 112540, 112541, 112542, 112543, 112573, 112574, 112575, 112606, 112607, 112639, 114159, 114167, 114172, 114173, 114175, 114427, 114428, 114429, 114431, 114588, 114589, 114591, 114621, 114622, 114623, 114687, 127900, 127901, 127903, 127933, 127934, 127935, 127999, 128957, 128958, 128959, 128991, 129023, 131071, 236793, 236795, 236799, 236915, 236917, 236919, 236921, 236923, 236924, 236925, 236927, 237047, 237049, 237051, 237055, 237369, 237370, 237371, 237374, 237375, 237435, 237437, 237439, 237567, 241070, 241071, 241075, 241078, 241079, 241086, 241087, 241135, 241139, 241141, 241143, 241148, 241149, 241151, 241276, 241277, 241279, 241337, 241338, 241339, 241342, 241343, 241399, 241403, 241404, 241405, 241407, 241565, 241567, 241597, 241598, 241599, 241663, 245231, 245239, 245241, 245243, 245247, 245497, 245499, 245503, 245563, 245566, 245567, 245627, 245629, 245631, 245759, 255966, 255967, 255999, 257915, 257917, 257919, 257982, 257983, 258047, 262143, 507375, 507383, 507391, 507639, 507643, 507647, 507903, 515965, 515967, 516095, 524287, 1048575, 1082430, 1082431, 1082460, 1082461, 1082462, 1082463, 1082494, 1082495, 1082584, 1082585, 1082586, 1082587, 1082590, 1082591, 1082617, 1082618, 1082619, 1082622, 1082623, 1082838, 1082839, 1082846, 1082847, 1082871, 1082878, 1082879, 1083358, 1083359, 1083391, 1083544, 1083545, 1083546, 1083547, 1083550, 1083551, 1083578, 1083579, 1083580, 1083581, 1083582, 1083583, 1083608, 1083609, 1083610, 1083611, 1083612, 1083613, 1083614, 1083615, 1083642, 1083643, 1083644, 1083645, 1083646, 1083647, 1083796, 1083797, 1083798, 1083799, 1083804, 1083805, 1083806, 1083807, 1083829, 1083830, 1083831, 1083836, 1083837, 1083838, 1083839, 1083862, 1083863, 1083868, 1083869, 1083870, 1083871, 1083895, 1083900, 1083901, 1083902, 1083903, 1084316, 1084317, 1084318, 1084319, 1084349, 1084350, 1084351, 1084382, 1084383, 1084415, 1084606, 1084607, 1084636, 1084637, 1084638, 1084639, 1084670, 1084671, 1084820, 1084821, 1084822, 1084823, 1084828, 1084829, 1084830, 1084831, 1084853, 1084854, 1084855, 1084860, 1084861, 1084862, 1084863, 1084886, 1084887, 1084892, 1084893, 1084894, 1084895, 1084919, 1084924, 1084925, 1084926, 1084927, 1085340, 1085341, 1085342, 1085343, 1085373, 1085374, 1085375, 1085406, 1085407, 1085439, 1087704, 1087705, 1087706, 1087707, 1087710, 1087711, 1087738, 1087739, 1087742, 1087743, 1087826, 1087827, 1087828, 1087829, 1087830, 1087831, 1087836, 1087837, 1087838, 1087839, 1087859, 1087861, 1087862, 1087863, 1087864, 1087865, 1087866, 1087867, 1087868, 1087869, 1087870, 1087871, 1087958, 1087959, 1087960, 1087961, 1087962, 1087963, 1087966, 1087967, 1087991, 1087992, 1087993, 1087994, 1087995, 1087998, 1087999, 1088286, 1088287, 1088314, 1088315, 1088318, 1088319, 1088346, 1088347, 1088348, 1088349, 1088350, 1088351, 1088379, 1088381, 1088382, 1088383, 1088478, 1088479, 1088511, 1088766, 1088767, 1088883, 1088885, 1088886, 1088887, 1088892, 1088893, 1088894, 1088895, 1088982, 1088983, 1088985, 1088986, 1088987, 1088990, 1088991, 1089015, 1089017, 1089018, 1089019, 1089022, 1089023, 1089342, 1089343, 1089370, 1089371, 1089372, 1089373, 1089374, 1089375, 1089403, 1089405, 1089406, 1089407, 1089502, 1089503, 1089535, 1096150, 1096151, 1096158, 1096159, 1096182, 1096183, 1096190, 1096191, 1096410, 1096411, 1096414, 1096415, 1096439, 1096443, 1096446, 1096447, 1096670, 1096671, 1096703, 1097207, 1097214, 1097215, 1097467, 1097470, 1097471, 1097694, 1097695, 1097727, 1113054, 1113055, 1113087, 1114111, 1117588, 1117589, 1117591, 1117596, 1117597, 1117599, 1117622, 1117623, 1117628, 1117629, 1117630, 1117631, 1117687, 1117692, 1117693, 1117695, 1118108, 1118109, 1118111, 1118141, 1118142, 1118143, 1118207, 1118480, 1118481, 1118483, 1118487, 1118495, 1118514, 1118515, 1118518, 1118519, 1118520, 1118521, 1118522, 1118523, 1118526, 1118527, 1118579, 1118581, 1118583, 1118584, 1118585, 1118587, 1118588, 1118589, 1118591, 1118711, 1118712, 1118713, 1118715, 1118719, 1119000, 1119001, 1119003, 1119007, 1119033, 1119034, 1119035, 1119038, 1119039, 1119099, 1119101, 1119103, 1119231, 1119542, 1119543, 1119548, 1119549, 1119550, 1119551, 1119572, 1119573, 1119574, 1119575, 1119580, 1119581, 1119583, 1119606, 1119607, 1119608, 1119609, 1119610, 1119611, 1119612, 1119613, 1119614, 1119615, 1119640, 1119641, 1119642, 1119643, 1119644, 1119645, 1119646, 1119647, 1119674, 1119675, 1119676, 1119677, 1119678, 1119679, 1119702, 1119703, 1119704, 1119705, 1119706, 1119707, 1119708, 1119709, 1119710, 1119711, 1119735, 1119736, 1119737, 1119738, 1119739, 1119740, 1119741, 1119742, 1119743, 1120024, 1120025, 1120026, 1120027, 1120028, 1120029, 1120030, 1120031, 1120057, 1120058, 1120059, 1120060, 1120061, 1120062, 1120063, 1120090, 1120091, 1120092, 1120093, 1120094, 1120095, 1120123, 1120124, 1120125, 1120126, 1120127, 1120156, 1120157, 1120158, 1120159, 1120189, 1120190, 1120191, 1120222, 1120223, 1120255, 1121660, 1121661, 1121663, 1121684, 1121685, 1121687, 1121688, 1121689, 1121691, 1121692, 1121693, 1121695, 1121718, 1121719, 1121720, 1121721, 1121722, 1121723, 1121724, 1121725, 1121726, 1121727, 1121783, 1121784, 1121785, 1121787, 1121788, 1121789, 1121791, 1122072, 1122073, 1122075, 1122076, 1122077, 1122079, 1122105, 1122106, 1122107, 1122108, 1122109, 1122110, 1122111, 1122171, 1122172, 1122173, 1122175, 1122204, 1122205, 1122207, 1122237, 1122238, 1122239, 1122303, 1126807, 1126815, 1126836, 1126837, 1126838, 1126839, 1126844, 1126845, 1126846, 1126847, 1126900, 1126901, 1126903, 1126908, 1126909, 1126911, 1127064, 1127065, 1127067, 1127068, 1127069, 1127071, 1127094, 1127095, 1127097, 1127098, 1127099, 1127100, 1127101, 1127102, 1127103, 1127159, 1127163, 1127164, 1127165, 1127167, 1127324, 1127325, 1127327, 1127357, 1127358, 1127359, 1127423, 1127862, 1127863, 1127868, 1127869, 1127870, 1127871, 1127893, 1127895, 1127900, 1127901, 1127903, 1127925, 1127926, 1127927, 1127932, 1127933, 1127934, 1127935, 1128121, 1128122, 1128123, 1128124, 1128125, 1128126, 1128127, 1128155, 1128156, 1128157, 1128159, 1128183, 1128187, 1128188, 1128189, 1128190, 1128191, 1128348, 1128349, 1128350, 1128351, 1128381, 1128382, 1128383, 1128414, 1128415, 1128447, 1129975, 1129980, 1129981, 1129983, 1130235, 1130236, 1130237, 1130239, 1130396, 1130397, 1130399, 1130429, 1130430, 1130431, 1130495, 1143708, 1143709, 1143711, 1143741, 1143742, 1143743, 1143807, 1144765, 1144766, 1144767, 1144799, 1144831, 1146879, 1150364, 1150365, 1150366, 1150367, 1150398, 1150399, 1150428, 1150429, 1150430, 1150431, 1150462, 1150463, 1150876, 1150877, 1150878, 1150879, 1150909, 1150910, 1150911, 1150942, 1150943, 1150975, 1152318, 1152319, 1152348, 1152349, 1152350, 1152351, 1152382, 1152383, 1152472, 1152473, 1152474, 1152475, 1152478, 1152479, 1152504, 1152505, 1152506, 1152507, 1152510, 1152511, 1152794, 1152795, 1152798, 1152799, 1152826, 1152827, 1152830, 1152831, 1152858, 1152859, 1152860, 1152861, 1152862, 1152863, 1152891, 1152893, 1152894, 1152895, 1152990, 1152991, 1153023, 1153432, 1153433, 1153434, 1153435, 1153436, 1153437, 1153438, 1153439, 1153466, 1153467, 1153468, 1153469, 1153470, 1153471, 1153496, 1153497, 1153498, 1153499, 1153500, 1153501, 1153502, 1153503, 1153530, 1153531, 1153532, 1153533, 1153534, 1153535, 1153816, 1153817, 1153818, 1153819, 1153820, 1153821, 1153822, 1153823, 1153849, 1153850, 1153851, 1153852, 1153853, 1153854, 1153855, 1153882, 1153883, 1153884, 1153885, 1153886, 1153887, 1153915, 1153916, 1153917, 1153918, 1153919, 1153948, 1153949, 1153950, 1153951, 1153981, 1153982, 1153983, 1154014, 1154015, 1154047, 1154460, 1154461, 1154462, 1154463, 1154494, 1154495, 1154524, 1154525, 1154526, 1154527, 1154558, 1154559, 1154840, 1154841, 1154842, 1154843, 1154844, 1154845, 1154846, 1154847, 1154873, 1154874, 1154875, 1154876, 1154877, 1154878, 1154879, 1154906, 1154907, 1154908, 1154909, 1154910, 1154911, 1154939, 1154940, 1154941, 1154942, 1154943, 1154972, 1154973, 1154974, 1154975, 1155005, 1155006, 1155007, 1155038, 1155039, 1155071, 1159606, 1159607, 1159614, 1159615, 1159636, 1159637, 1159638, 1159639, 1159644, 1159645, 1159646, 1159647, 1159668, 1159669, 1159670, 1159671, 1159676, 1159677, 1159678, 1159679, 1159832, 1159833, 1159834, 1159835, 1159836, 1159837, 1159838, 1159839, 1159862, 1159863, 1159865, 1159866, 1159867, 1159868, 1159869, 1159870, 1159871, 1159894, 1159895, 1159898, 1159899, 1159900, 1159901, 1159902, 1159903, 1159927, 1159931, 1159932, 1159933, 1159934, 1159935, 1160092, 1160093, 1160094, 1160095, 1160125, 1160126, 1160127, 1160158, 1160159, 1160191, 1160638, 1160639, 1160661, 1160662, 1160663, 1160668, 1160669, 1160670, 1160671, 1160693, 1160694, 1160695, 1160700, 1160701, 1160702, 1160703, 1160889, 1160890, 1160891, 1160892, 1160893, 1160894, 1160895, 1160918, 1160919, 1160922, 1160923, 1160924, 1160925, 1160926, 1160927, 1160951, 1160955, 1160956, 1160957, 1160958, 1160959, 1161116, 1161117, 1161118, 1161119, 1161149, 1161150, 1161151, 1161182, 1161183, 1161215, 1161686, 1161687, 1161692, 1161693, 1161694, 1161695, 1161718, 1161719, 1161724, 1161725, 1161726, 1161727, 1161946, 1161947, 1161948, 1161949, 1161950, 1161951, 1161975, 1161979, 1161980, 1161981, 1161982, 1161983, 1162140, 1162141, 1162142, 1162143, 1162173, 1162174, 1162175, 1162206, 1162207, 1162239, 1162743, 1162748, 1162749, 1162750, 1162751, 1163003, 1163004, 1163005, 1163006, 1163007, 1163164, 1163165, 1163166, 1163167, 1163197, 1163198, 1163199, 1163230, 1163231, 1163263, 1176476, 1176477, 1176478, 1176479, 1176509, 1176510, 1176511, 1176542, 1176543, 1176575, 1177533, 1177534, 1177535, 1177566, 1177567, 1177599, 1178590, 1178591, 1178623, 1179647, 1252120, 1252121, 1252122, 1252123, 1252126, 1252127, 1252153, 1252154, 1252155, 1252158, 1252159, 1252187, 1252188, 1252189, 1252190, 1252191, 1252219, 1252221, 1252222, 1252223, 1252318, 1252319, 1252351, 1253145, 1253146, 1253147, 1253150, 1253151, 1253177, 1253178, 1253179, 1253182, 1253183, 1253210, 1253211, 1253212, 1253213, 1253214, 1253215, 1253243, 1253245, 1253246, 1253247, 1253342, 1253343, 1253375, 1255858, 1255859, 1255860, 1255861, 1255862, 1255863, 1255868, 1255869, 1255870, 1255871, 1255922, 1255923, 1255924, 1255925, 1255926, 1255927, 1255932, 1255933, 1255934, 1255935, 1256028, 1256029, 1256030, 1256031, 1256060, 1256061, 1256062, 1256063, 1256088, 1256089, 1256090, 1256091, 1256094, 1256095, 1256118, 1256119, 1256121, 1256122, 1256123, 1256124, 1256125, 1256126, 1256127, 1256151, 1256155, 1256156, 1256157, 1256158, 1256159, 1256183, 1256187, 1256188, 1256189, 1256190, 1256191, 1256348, 1256349, 1256350, 1256351, 1256381, 1256382, 1256383, 1256414, 1256415, 1256447, 1256886, 1256887, 1256890, 1256891, 1256894, 1256895, 1256917, 1256919, 1256920, 1256921, 1256922, 1256923, 1256924, 1256925, 1256926, 1256927, 1256950, 1256951, 1256954, 1256955, 1256956, 1256957, 1256958, 1256959, 1257084, 1257085, 1257086, 1257087, 1257144, 1257145, 1257146, 1257147, 1257150, 1257151, 1257175, 1257176, 1257177, 1257178, 1257179, 1257180, 1257181, 1257182, 1257183, 1257207, 1257208, 1257209, 1257210, 1257211, 1257212, 1257213, 1257214, 1257215, 1257246, 1257247, 1257276, 1257277, 1257278, 1257279, 1257306, 1257307, 1257308, 1257309, 1257310, 1257311, 1257339, 1257340, 1257341, 1257342, 1257343, 1257372, 1257373, 1257374, 1257375, 1257405, 1257406, 1257407, 1257438, 1257439, 1257471, 1260025, 1260027, 1260031, 1260249, 1260251, 1260255, 1260279, 1260280, 1260281, 1260282, 1260283, 1260286, 1260287, 1260314, 1260315, 1260318, 1260319, 1260345, 1260346, 1260347, 1260350, 1260351, 1260379, 1260380, 1260381, 1260382, 1260383, 1260411, 1260413, 1260414, 1260415, 1260510, 1260511, 1260543, 1261047, 1261048, 1261049, 1261050, 1261051, 1261054, 1261055, 1261304, 1261305, 1261306, 1261307, 1261310, 1261311, 1261339, 1261342, 1261343, 1261369, 1261370, 1261371, 1261374, 1261375, 1261402, 1261403, 1261404, 1261405, 1261406, 1261407, 1261435, 1261437, 1261438, 1261439, 1261534, 1261535, 1261567, 1270750, 1270751, 1270783, 1271614, 1271615, 1271642, 1271643, 1271644, 1271645, 1271646, 1271647, 1271675, 1271677, 1271678, 1271679, 1271774, 1271775, 1271807, 1272667, 1272668, 1272669, 1272670, 1272671, 1272699, 1272700, 1272701, 1272702, 1272703, 1272734, 1272735, 1272765, 1272766, 1272767, 1272798, 1272799, 1272831, 1273723, 1273725, 1273726, 1273727, 1273790, 1273791, 1273822, 1273823, 1273855, 1276894, 1276895, 1276927, 1277951, 1285945, 1285946, 1285947, 1285950, 1285951, 1285978, 1285979, 1285980, 1285981, 1285982, 1285983, 1286011, 1286013, 1286014, 1286015, 1286110, 1286111, 1286143, 1289662, 1289663, 1289692, 1289693, 1289694, 1289695, 1289726, 1289727, 1289852, 1289853, 1289854, 1289855, 1289913, 1289914, 1289915, 1289918, 1289919, 1289946, 1289947, 1289948, 1289949, 1289950, 1289951, 1289979, 1289980, 1289981, 1289982, 1289983, 1290140, 1290141, 1290142, 1290143, 1290173, 1290174, 1290175, 1290206, 1290207, 1290239, 1292761, 1292763, 1292767, 1292794, 1292795, 1292798, 1292799, 1293017, 1293018, 1293019, 1293022, 1293023, 1293049, 1293050, 1293051, 1293054, 1293055, 1293114, 1293115, 1293118, 1293119, 1293146, 1293147, 1293148, 1293149, 1293150, 1293151, 1293179, 1293181, 1293182, 1293183, 1293278, 1293279, 1293311, 1293822, 1293823, 1294073, 1294074, 1294075, 1294078, 1294079, 1294139, 1294142, 1294143, 1294170, 1294171, 1294172, 1294173, 1294174, 1294175, 1294203, 1294205, 1294206, 1294207, 1294302, 1294303, 1294335, 1304542, 1304543, 1304575, 1305435, 1305436, 1305437, 1305438, 1305439, 1305467, 1305468, 1305469, 1305470, 1305471, 1305502, 1305503, 1305533, 1305534, 1305535, 1305566, 1305567, 1305599, 1306491, 1306493, 1306494, 1306495, 1306558, 1306559, 1306590, 1306591, 1306623, 1309662, 1309663, 1309695, 1310719, 1522391, 1522395, 1522399, 1522423, 1522427, 1522430, 1522431, 1522655, 1522687, 1523190, 1523191, 1523198, 1523199, 1523415, 1523418, 1523419, 1523422, 1523423, 1523447, 1523451, 1523454, 1523455, 1523678, 1523679, 1523711, 1530716, 1530717, 1530718, 1530719, 1530747, 1530749, 1530750, 1530751, 1530846, 1530847, 1530879, 1531643, 1531646, 1531647, 1531773, 1531774, 1531775, 1531870, 1531871, 1531903, 1539038, 1539039, 1539071, 1540095, 1555966, 1555967, 1556215, 1556219, 1556222, 1556223, 1556446, 1556447, 1556479, 1564541, 1564542, 1564543, 1564638, 1564639, 1564671, 1571806, 1571807, 1571839, 1572863, 2063326, 2063327, 2063359, 2064383, 2097151, 3248028, 3248029, 3248031, 3248062, 3248063, 3248127, 3249948, 3249949, 3249950, 3249951, 3249982, 3249983, 3250012, 3250013, 3250014, 3250015, 3250046, 3250047, 3250076, 3250077, 3250078, 3250079, 3250109, 3250110, 3250111, 3250142, 3250143, 3250175, 3252124, 3252125, 3252127, 3252158, 3252159, 3252223, 3256984, 3256985, 3256987, 3256988, 3256989, 3256991, 3257017, 3257018, 3257019, 3257020, 3257021, 3257022, 3257023, 3257083, 3257084, 3257085, 3257087, 3257244, 3257245, 3257247, 3257277, 3257278, 3257279, 3257343, 3258041, 3258042, 3258043, 3258044, 3258045, 3258046, 3258047, 3258075, 3258076, 3258077, 3258079, 3258107, 3258108, 3258109, 3258110, 3258111, 3258268, 3258269, 3258270, 3258271, 3258301, 3258302, 3258303, 3258334, 3258335, 3258367, 3260155, 3260156, 3260157, 3260159, 3260316, 3260317, 3260319, 3260349, 3260350, 3260351, 3260415, 3273628, 3273629, 3273631, 3273661, 3273662, 3273663, 3273727, 3274685, 3274686, 3274687, 3274719, 3274751, 3276799, 3319358, 3319359, 3319388, 3319389, 3319390, 3319391, 3319422, 3319423, 3319514, 3319515, 3319518, 3319519, 3319547, 3319550, 3319551, 3319774, 3319775, 3319807, 3320472, 3320473, 3320474, 3320475, 3320478, 3320479, 3320506, 3320507, 3320508, 3320509, 3320510, 3320511, 3320537, 3320539, 3320540, 3320541, 3320542, 3320543, 3320571, 3320572, 3320573, 3320574, 3320575, 3320732, 3320733, 3320735, 3320765, 3320766, 3320767, 3320831, 3321534, 3321535, 3321564, 3321565, 3321566, 3321567, 3321598, 3321599, 3321628, 3321629, 3321630, 3321631, 3321662, 3321663, 3321692, 3321693, 3321694, 3321695, 3321726, 3321727, 3321756, 3321757, 3321758, 3321759, 3321789, 3321790, 3321791, 3321822, 3321823, 3321855, 3324632, 3324633, 3324634, 3324635, 3324638, 3324639, 3324666, 3324667, 3324670, 3324671, 3324697, 3324698, 3324699, 3324702, 3324703, 3324729, 3324730, 3324731, 3324734, 3324735, 3324762, 3324763, 3324764, 3324765, 3324766, 3324767, 3324795, 3324797, 3324798, 3324799, 3324894, 3324895, 3324927, 3325694, 3325695, 3325721, 3325722, 3325723, 3325726, 3325727, 3325753, 3325754, 3325755, 3325758, 3325759, 3325786, 3325787, 3325788, 3325789, 3325790, 3325791, 3325819, 3325821, 3325822, 3325823, 3325918, 3325919, 3325951, 3335005, 3335007, 3335037, 3335038, 3335039, 3335134, 3335135, 3335167, 3335998, 3335999, 3336028, 3336029, 3336030, 3336031, 3336061, 3336062, 3336063, 3336158, 3336159, 3336191, 3337052, 3337053, 3337054, 3337055, 3337084, 3337085, 3337086, 3337087, 3337118, 3337119, 3337149, 3337150, 3337151, 3337182, 3337183, 3337215, 3338109, 3338110, 3338111, 3338174, 3338175, 3338206, 3338207, 3338239, 3341278, 3341279, 3341311, 3342335, 3387292, 3387293, 3387295, 3387326, 3387327, 3387391, 3388218, 3388219, 3388220, 3388221, 3388222, 3388223, 3388283, 3388284, 3388285, 3388287, 3388317, 3388319, 3388349, 3388350, 3388351, 3388415, 3389212, 3389213, 3389214, 3389215, 3389246, 3389247, 3389276, 3389277, 3389278, 3389279, 3389310, 3389311, 3389340, 3389341, 3389342, 3389343, 3389373, 3389374, 3389375, 3389406, 3389407, 3389439, 3391388, 3391389, 3391391, 3391422, 3391423, 3391487, 3400572, 3400573, 3400575, 3400607, 3400637, 3400638, 3400639, 3400703, 3401534, 3401535, 3401564, 3401565, 3401567, 3401596, 3401597, 3401598, 3401599, 3401628, 3401629, 3401630, 3401631, 3401661, 3401662, 3401663, 3401694, 3401695, 3401727, 3403644, 3403645, 3403647, 3403676, 3403677, 3403679, 3403709, 3403710, 3403711, 3403775, 3404701, 3404703, 3404733, 3404734, 3404735, 3404799, 3405757, 3405758, 3405759, 3405791, 3405823, 3407871, 3554998, 3554999, 3555002, 3555003, 3555007, 3555063, 3555067, 3555069, 3555071, 3555327, 3561177, 3561179, 3561181, 3561183, 3561210, 3561211, 3561213, 3561214, 3561215, 3561311, 3561339, 3561342, 3561343, 3561471, 3563259, 3563261, 3563263, 3563389, 3563391, 3563455, 3563519, 3571711, 3586746, 3586747, 3586750, 3586751, 3586811, 3586812, 3586813, 3586815, 3586975, 3587006, 3587007, 3587071, 3587774, 3587775, 3587804, 3587805, 3587806, 3587807, 3587838, 3587839, 3587998, 3587999, 3588030, 3588031, 3588062, 3588063, 3588095, 3594046, 3594047, 3594076, 3594077, 3594078, 3594079, 3594108, 3594109, 3594110, 3594111, 3594174, 3594175, 3594206, 3594207, 3594239, 3595132, 3595133, 3595135, 3595165, 3595167, 3595197, 3595198, 3595199, 3595263, 3596156, 3596157, 3596158, 3596159, 3596189, 3596190, 3596191, 3596221, 3596222, 3596223, 3596254, 3596255, 3596287, 3601374, 3601375, 3601407, 3602366, 3602367, 3602398, 3602399, 3602431, 3603422, 3603423, 3603455, 3604479, 3653532, 3653533, 3653535, 3653566, 3653567, 3653631, 3661692, 3661693, 3661695, 3661724, 3661725, 3661727, 3661757, 3661758, 3661759, 3661823, 3666847, 3666877, 3666878, 3666879, 3666943, 3667901, 3667902, 3667903, 3667935, 3667967, 3670015, 4092927, 4093919, 4093951, 4095999, 4126654, 4126655, 4126686, 4126687, 4126719, 4127743, 4128767, 4194303, 7595838, 7595839, 7595868, 7595869, 7595871, 7595902, 7595903, 7595998, 7595999, 7596031, 7598014, 7598015, 7598079, 7602175, 7720861, 7720863, 7720894, 7720895, 7720959, 7722814, 7722815, 7722844, 7722845, 7722847, 7722878, 7722879, 7722974, 7722975, 7723007, 7724957, 7724959, 7724990, 7724991, 7725055, 7730110, 7730111, 7730175, 7731134, 7731135, 7731167, 7731199, 7733247, 7858046, 7858047, 7858142, 7858143, 7858175, 7860158, 7860159, 7860223, 7864319, 8190943, 8190975, 8191999, 8253374, 8253375, 8253439, 8255455, 8255487, 8257535, 8388607, 16510910, 16510911, 16510975, 16515071, 16777215, 33554431]

if N in repd:
    reps = repd[N]
else:
    reps_if = np.ones(2**(N*N), dtype=bool)
    for i in range(2**(N*N)):
        if reps_if[i]:
            reps.append(i)
            mat = mat_from_num(i)
            for L, R in itertools.product(permutations, repeat=2):
                reps_if[num_from_mat(L@mat.T@R)] = reps_if[num_from_mat(L@mat@R)] = False

def simple_sum(perms):
    A = np.zeros((N, N), int)
    for perm in perms:
        for i in range(len(perm)):
                A[i,perm[i]] += 1
    return A

def simple_average(perms):
    A = simple_sum(perms)
    gcd = np.gcd.reduce(A.flatten())
    A //= gcd
    den = int(np.sum(A[0]))
    return erdos_finder.fracMatrix(A, den, None, erdos_finder.linearCombination(np.ones(len(perms)), perms))

def same_zeros(A, B):
    return ((A==0) == (B==0)).all()

def empty_rows(mat):
    for i in range(N):
        if np.sum(mat[i]) == 0 or np.sum(mat[:,i]) == 0:
            return False
    support = erdos_finder.supporting_permutations(mat, permutations_lis)
    if same_zeros(mat, simple_sum(support)):
        return True
    return False

##prepd = {}
##prepd[4] = [4680, 4812, 5804, 5806, 5870, 7918, 13260, 13261, 13263, 13278, 13279, 13311, 13726, 13727, 13740, 13741, 13743, 13758, 13759, 13806, 13807, 13823, 14285, 14287, 14302, 14303, 14335, 15615, 15838, 15839, 15855, 15871, 16383, 31710, 31711, 31743, 32767, 65535]
#del prepd[5]
if N in prepd:
    preps = prepd[N]
else:
    preps = []
    for i in reps:
        if empty_rows(mat_from_num(i)):
            preps.append(i)
    prepd[N] = preps

def linearly_independent_comninations(gram, once = True):
    selection = []
    rank = np.linalg.matrix_rank(gram)
    i = 0
    while True:
        if i < len(gram):
            selection.append(i)
            sub_gram_matrix = gram[np.ix_(selection, selection)]
            if not np.linalg.det(sub_gram_matrix) >= 0.1:
                selection.pop()
            i += 1
        else:
            if len(selection) >= rank:
                yield selection
                if once:
                    return
            if not selection:
                return
            i = selection.pop()+1


if N in erdod:
    erdoses = erdod[N]
else:
    erdoses = {}

erdoses = {}
skipee = [3670015, 4128767, 7598079, 7858175, 7860159, 7860223, 7864319, 8190975, 8191999, 8253374, 8253375, 8253439, 8255487, 8257535, 16510911, 16510975, 16515071]
lost_but_skipped = [4126655, 4126719, 4127743, 7596031, 7725055, 7733247, 7858047]
skipped = []
basis_found = {}
basis_keys = [3319358, 3319359, 3319388, 3319389, 3319390, 3319391, 3319422, 3319423, 3319514, 3319515, 3319518, 3319519, 3319547, 3319550, 3319551, 3319774, 3319775, 3319807, 3320510, 3320511, 3321534, 3321535, 3321564, 3321565, 3321566, 3321567, 3321598, 3321599, 3321630, 3321631, 3321662, 3321663, 3321692, 3321693, 3321694, 3321695, 3321726, 3321727, 3321758, 3321759, 3321790, 3321791, 3321822, 3321823, 3321855, 3324670, 3324671, 3325694, 3325695, 3325758, 3325759, 3325822, 3325823, 3325918, 3325919, 3325951, 3335998, 3335999]

from time import time
start = time()
total = len(preps)-len(skipee)-len(erdoses)
for i, n in enumerate(preps):
    if True or (n not in basis_keys and n not in erdoses):
        mat = mat_from_num(n)
        support = erdos_finder.supporting_permutations(mat, permutations_lis)

        if support:

            # Calculating the simple average of all matrices in support.
            E = simple_average(support)
            reserve = None
            basis = None
            if not E.is_erdos:
                # Running the algorithm if simple average is not good enough

                check = time()
##                r = np.linalg.matrix_rank(erdos_finder.gram_matrix(support))
##                for selection in itertools.combinations(support, r):
                for indices in linearly_independent_comninations(erdos_finder.gram_matrix(support), False):
                    selection = [support[j] for j in indices]
                    E = erdos_finder.erdosify(selection)
                    if E and E.is_erdos:
                        if not same_zeros(mat, E.numerator):
                            break
                        else:
                            reserve = E
                    elif E:
                        basis = E
                    if time()-check > 6:
                        if reserve:
                            print(f"Skipping {i}. Falling back to reserves.")
                        elif basis:
                            print(f"Skipping {i}. Basis found.")
                        else:
                            print(f"Skipping {i}. Non basis found")
                            skipped.append(num_from_mat(mat))
                        break
            if E and E.is_erdos:
                erdoses[n] = E
            elif reserve:
                erdoses[n] = reserve
            elif basis:
                basis_found[n] = basis
    if i%10 == 0:
        print(f"{i}/{len(preps)}. {time()-start:.2f}s")
                
perdoses = [n for n, E in erdoses.items() if same_zeros(mat_from_num(n), E.numerator)]

##erdod[N] = erdoses
##with open("erdoses.pkl", mode="wb") as f:
##    pickle.dump((repd,prepd,erdod), f)

def dict_minus(first, other=None):
    ret = {}
    if other is None:
        other = first
    for n in first:
        for m in other:
            if(first[n].numerator == other[m].numerator).all():
                break
        else:
            ret[n] = first[n]
    return ret

##olds = [fracMatrix(numerator=array([[1, 4, 2, 2, 2],
##       [2, 0, 3, 3, 3],
##       [2, 0, 3, 3, 3],
##       [2, 0, 3, 3, 3],
##       [4, 7, 0, 0, 0]]), denominator=11, is_erdos=True, solution=None), fracMatrix(numerator=array([[ 2,  4,  4,  4,  4],
##       [ 2,  4,  4,  4,  4],
##       [ 3,  0,  5,  5,  5],
##       [ 3,  0,  5,  5,  5],
##       [ 8, 10,  0,  0,  0]]), denominator=18, is_erdos=True, solution=None), fracMatrix(numerator=array([[ 4,  4,  6,  6,  6],
##       [ 4,  4,  6,  6,  6],
##       [ 0,  5,  7,  7,  7],
##       [ 5,  0,  7,  7,  7],
##       [13, 13,  0,  0,  0]]), denominator=26, is_erdos=True, solution=None), fracMatrix(numerator=array([[2, 3, 3, 6, 6],
##       [2, 3, 3, 6, 6],
##       [4, 0, 0, 8, 8],
##       [6, 7, 7, 0, 0],
##       [6, 7, 7, 0, 0]]), denominator=20, is_erdos=True, solution=None), fracMatrix(numerator=array([[18, 18, 29, 44, 49],
##       [18, 18, 29, 44, 49],
##       [29, 29, 40,  0, 60],
##       [44, 44,  0, 70,  0],
##       [49, 49, 60,  0,  0]]), denominator=158, is_erdos=True, solution=None), fracMatrix(numerator=array([[ 5,  5,  8,  8, 13],
##       [ 5,  5,  8,  8, 13],
##       [ 5,  5,  8,  8, 13],
##       [12, 12,  0, 15,  0],
##       [12, 12, 15,  0,  0]]), denominator=39, is_erdos=True, solution=None), fracMatrix(numerator=array([[ 7, 11, 16, 11, 16],
##       [11, 15,  0, 15, 20],
##       [16,  0,  0, 20, 25],
##       [11, 15, 20, 15,  0],
##       [16, 20, 25,  0,  0]]), denominator=61, is_erdos=True, solution=None)]
##
##lost = {np.int64(4126655): fracMatrix(numerator=array([[1, 4, 2, 2, 2],
##       [2, 0, 3, 3, 3],
##       [2, 0, 3, 3, 3],
##       [2, 0, 3, 3, 3],
##       [4, 7, 0, 0, 0]]), denominator=11, is_erdos=True, solution=None), np.int64(4126719): fracMatrix(numerator=array([[ 2,  4,  4,  4,  4],
##       [ 2,  4,  4,  4,  4],
##       [ 3,  0,  5,  5,  5],
##       [ 3,  0,  5,  5,  5],
##       [ 8, 10,  0,  0,  0]]), denominator=18, is_erdos=True, solution=None), np.int64(4127743): fracMatrix(numerator=array([[ 4,  4,  6,  6,  6],
##       [ 4,  4,  6,  6,  6],
##       [ 0,  5,  7,  7,  7],
##       [ 5,  0,  7,  7,  7],
##       [13, 13,  0,  0,  0]]), denominator=26, is_erdos=True, solution=None), np.int64(7596031): fracMatrix(numerator=array([[2, 3, 3, 6, 6],
##       [2, 3, 3, 6, 6],
##       [4, 0, 0, 8, 8],
##       [6, 7, 7, 0, 0],
##       [6, 7, 7, 0, 0]]), denominator=20, is_erdos=True, solution=None), np.int64(7725055): fracMatrix(numerator=array([[18, 18, 29, 44, 49],
##       [18, 18, 29, 44, 49],
##       [29, 29, 40,  0, 60],
##       [44, 44,  0, 70,  0],
##       [49, 49, 60,  0,  0]]), denominator=158, is_erdos=True, solution=None), np.int64(7733247): fracMatrix(numerator=array([[ 5,  5,  8,  8, 13],
##       [ 5,  5,  8,  8, 13],
##       [ 5,  5,  8,  8, 13],
##       [12, 12,  0, 15,  0],
##       [12, 12, 15,  0,  0]]), denominator=39, is_erdos=True, solution=None), np.int64(7858047): fracMatrix(numerator=array([[ 7, 11, 16, 11, 16],
##       [11, 15,  0, 15, 20],
##       [16,  0,  0, 20, 25],
##       [11, 15, 20, 15,  0],
##       [16, 20, 25,  0,  0]]), denominator=61, is_erdos=True, solution=None), np.int64(1260380): fracMatrix(numerator=array([[ 0,  0,  2,  3,  5],
##       [ 0,  2,  0,  3,  5],
##       [ 0,  3,  3,  4,  0],
##       [ 0,  5,  5,  0,  0],
##       [10,  0,  0,  0,  0]]), denominator=10, is_erdos=True, solution=None), np.int64(1260510): fracMatrix(numerator=array([[ 0,  2,  2,  5,  9],
##       [ 0,  2,  2,  5,  9],
##       [ 0,  5,  5,  8,  0],
##       [ 0,  9,  9,  0,  0],
##       [18,  0,  0,  0,  0]]), denominator=18, is_erdos=True, solution=None), np.int64(1272668): fracMatrix(numerator=array([[ 0,  0,  7,  5,  5],
##       [ 0,  5,  0,  6,  6],
##       [ 0,  5,  0,  6,  6],
##       [ 0,  7, 10,  0,  0],
##       [17,  0,  0,  0,  0]]), denominator=17, is_erdos=True, solution=None), np.int64(1272670): fracMatrix(numerator=array([[0, 1, 3, 2, 2],
##       [0, 2, 0, 3, 3],
##       [0, 2, 0, 3, 3],
##       [0, 3, 5, 0, 0],
##       [8, 0, 0, 0, 0]]), denominator=8, is_erdos=True, solution=None), np.int64(3249948): fracMatrix(numerator=array([[0, 0, 0, 1, 1],
##       [0, 0, 0, 1, 1],
##       [0, 0, 2, 0, 0],
##       [1, 1, 0, 0, 0],
##       [1, 1, 0, 0, 0]]), denominator=2, is_erdos=True, solution=None), np.int64(3324729): fracMatrix(numerator=array([[2, 0, 0, 5, 7],
##       [2, 0, 0, 5, 7],
##       [0, 5, 5, 4, 0],
##       [5, 0, 9, 0, 0],
##       [5, 9, 0, 0, 0]]), denominator=14, is_erdos=True, solution=None), np.int64(3324764): fracMatrix(numerator=array([[0, 0, 2, 3, 5],
##       [0, 2, 0, 3, 5],
##       [0, 3, 3, 4, 0],
##       [5, 0, 5, 0, 0],
##       [5, 5, 0, 0, 0]]), denominator=10, is_erdos=True, solution=None), np.int64(3324797): fracMatrix(numerator=array([[ 2,  0,  6, 11, 19],
##       [ 2,  6,  0, 11, 19],
##       [ 0, 11, 11, 16,  0],
##       [17,  0, 21,  0,  0],
##       [17, 21,  0,  0,  0]]), denominator=38, is_erdos=True, solution=None), np.int64(3324894): fracMatrix(numerator=array([[0, 2, 2, 5, 9],
##       [0, 2, 2, 5, 9],
##       [0, 5, 5, 8, 0],
##       [9, 0, 9, 0, 0],
##       [9, 9, 0, 0, 0]]), denominator=18, is_erdos=True, solution=None), np.int64(3324927): fracMatrix(numerator=array([[ 2,  6,  6, 17, 31],
##       [ 2,  6,  6, 17, 31],
##       [ 0, 17, 17, 28,  0],
##       [29,  0, 33,  0,  0],
##       [29, 33,  0,  0,  0]]), denominator=62, is_erdos=True, solution=None), np.int64(3335135): fracMatrix(numerator=array([[ 4,  8,  8,  9,  9],
##       [ 0,  9,  9, 10, 10],
##       [ 0,  0,  0, 19, 19],
##       [17,  0, 21,  0,  0],
##       [17, 21,  0,  0,  0]]), denominator=38, is_erdos=True, solution=None), np.int64(3337052): fracMatrix(numerator=array([[ 0,  0, 11,  7,  7],
##       [ 0,  7,  0,  9,  9],
##       [ 0,  7,  0,  9,  9],
##       [11,  0, 14,  0,  0],
##       [14, 11,  0,  0,  0]]), denominator=25, is_erdos=True, solution=None), np.int64(3337053): fracMatrix(numerator=array([[1, 0, 3, 2, 2],
##       [0, 2, 0, 3, 3],
##       [0, 2, 0, 3, 3],
##       [3, 0, 5, 0, 0],
##       [4, 4, 0, 0, 0]]), denominator=8, is_erdos=True, solution=None), np.int64(3337054): fracMatrix(numerator=array([[ 0,  5, 21, 12, 12],
##       [ 0, 12,  0, 19, 19],
##       [ 0, 12,  0, 19, 19],
##       [21,  0, 29,  0,  0],
##       [29, 21,  0,  0,  0]]), denominator=50, is_erdos=True, solution=None), np.int64(3388218): fracMatrix(numerator=array([[ 0,  4,  0,  5,  9],
##       [ 4,  0,  0,  5,  9],
##       [ 0,  0, 10,  8,  0],
##       [ 5,  5,  8,  0,  0],
##       [ 9,  9,  0,  0,  0]]), denominator=18, is_erdos=True, solution=None), np.int64(3388283): fracMatrix(numerator=array([[ 4,  4,  0,  9, 17],
##       [ 4,  4,  0,  9, 17],
##       [ 0,  0, 18, 16,  0],
##       [ 9,  9, 16,  0,  0],
##       [17, 17,  0,  0,  0]]), denominator=34, is_erdos=True, solution=None), np.int64(3400575): fracMatrix(numerator=array([[ 4,  4, 20,  9,  9],
##       [ 9,  9,  0, 14, 14],
##       [ 0,  0,  0, 23, 23],
##       [10, 10, 26,  0,  0],
##       [23, 23,  0,  0,  0]]), denominator=46, is_erdos=True, solution=None), np.int64(3403644): fracMatrix(numerator=array([[0, 0, 6, 4, 4],
##       [2, 2, 0, 5, 5],
##       [2, 2, 0, 5, 5],
##       [3, 3, 8, 0, 0],
##       [7, 7, 0, 0, 0]]), denominator=14, is_erdos=True, solution=None), np.int64(3403676): fracMatrix(numerator=array([[ 0,  0,  8,  9,  9],
##       [ 0,  0,  8,  9,  9],
##       [ 5,  5,  0,  8,  8],
##       [ 8,  8, 10,  0,  0],
##       [13, 13,  0,  0,  0]]), denominator=26, is_erdos=True, solution=None), np.int64(3404703): fracMatrix(numerator=array([[15, 15, 14, 24, 24],
##       [ 0,  0, 24, 34, 34],
##       [ 0,  0, 24, 34, 34],
##       [31, 31, 30,  0,  0],
##       [46, 46,  0,  0,  0]]), denominator=92, is_erdos=True, solution=None), np.int64(3554998): fracMatrix(numerator=array([[ 0,  5,  4,  0,  9],
##       [ 5,  0,  4,  0,  9],
##       [ 4,  4,  3,  7,  0],
##       [ 0,  0,  7, 11,  0],
##       [ 9,  9,  0,  0,  0]]), denominator=18, is_erdos=True, solution=None), np.int64(3555063): fracMatrix(numerator=array([[ 5,  5,  6,  0, 16],
##       [ 5,  5,  6,  0, 16],
##       [ 6,  6,  7, 13,  0],
##       [ 0,  0, 13, 19,  0],
##       [16, 16,  0,  0,  0]]), denominator=32, is_erdos=True, solution=None), np.int64(3555067): fracMatrix(numerator=array([[2, 2, 0, 3, 7],
##       [2, 2, 3, 0, 7],
##       [3, 3, 4, 4, 0],
##       [0, 0, 7, 7, 0],
##       [7, 7, 0, 0, 0]]), denominator=14, is_erdos=True, solution=None), np.int64(4126654): fracMatrix(numerator=array([[ 0, 13,  7,  7,  7],
##       [ 7,  0,  9,  9,  9],
##       [ 7,  0,  9,  9,  9],
##       [ 7,  0,  9,  9,  9],
##       [13, 21,  0,  0,  0]]), denominator=34, is_erdos=True, solution=None), np.int64(7595839): fracMatrix(numerator=array([[1, 3, 3, 3, 3],
##       [3, 0, 0, 5, 5],
##       [3, 0, 0, 5, 5],
##       [3, 5, 5, 0, 0],
##       [3, 5, 5, 0, 0]]), denominator=13, is_erdos=True, solution=None), np.int64(7720894): fracMatrix(numerator=array([[0, 1, 2, 2, 2],
##       [1, 0, 2, 2, 2],
##       [2, 2, 0, 0, 3],
##       [2, 2, 0, 3, 0],
##       [2, 2, 3, 0, 0]]), denominator=7, is_erdos=True, solution=None), np.int64(7720959): fracMatrix(numerator=array([[1, 1, 3, 3, 3],
##       [1, 1, 3, 3, 3],
##       [3, 3, 0, 0, 5],
##       [3, 3, 0, 5, 0],
##       [3, 3, 5, 0, 0]]), denominator=11, is_erdos=True, solution=None), np.int64(7722844): fracMatrix(numerator=array([[0, 0, 1, 1, 1],
##       [0, 1, 0, 1, 1],
##       [1, 0, 1, 0, 1],
##       [1, 1, 0, 1, 0],
##       [1, 1, 1, 0, 0]]), denominator=3, is_erdos=True, solution=None)}    


# Solution with negative coefficients
##7725055
##numerator=
##[[18 18 29 44 49]
## [18 18 29 44 49]
## [29 29 40  0 60]
## [44 44  0 70  0]
## [49 49 60  0  0]],
##denominator=158, is_erdos=True
##array([18, 11, -3, -2, -6, 18, -2, 31, 18, 29, -3, 49])
##[array([0, 1, 4, 3, 2]), array([0, 2, 4, 3, 1]), array([0, 3, 4, 1, 2]), array([0, 4, 1, 3, 2]), array([0, 4, 2, 3, 1]), array([1, 2, 4, 3, 0]), array([2, 3, 4, 0, 1]), array([2, 4, 1, 3, 0]), array([3, 0, 4, 1, 2]), array([3, 4, 0, 1, 2]), array([3, 4, 2, 0, 1]), array([4, 3, 2, 0, 1])]
